Output
======

You ran the pipeline, but now what? Here is the description of the pipeline
outputs and where to find them, but first...

The Visualizer
--------------

If you like pictures, hate juggling files into various Java applications, and
are OCD about having everything in one spot, then we have you covered. The
pipeline outputs its own web application with every run that allows you to view,
interact with, and download nearly every output file.

To use, you'll need Node.js v14 (LTS) or later. I highly recommend installing
Node.js via `a little application called n <https://github.com/tj/n>`_, which
keeps your Node.js packages clean and organized. You can use n, Node.js, and the
Visualizer on any computer, including Mac and Windows computers. Once you have
Node.js installed, point a terminal to the output directory, and run

::

    npm install && npm start

A link should appear in the terminal. Follow the link in your browser to access
the Visualizer.

The Visualizer contains links to all of the output files
:ref:`described below <File Output>`, as well as interactive viewers for
alignments and phylogenetic trees.

Once you are done, press ``CTRL+C`` in the terminal, and the Visualizer will
shut down. If you need it again, just run ``npm start`` in the results folder
and follow the link again.

File Output
-----------

You don't like all the fluff, huh? Here's the lowdown on the file structure you
can expect from each pipeline run.

Visualizer Data
^^^^^^^^^^^^^^^

All the following files and folders are strictly for powering the Visualizer,
and have no scientific merit. You may safely ignore them.

::

    results
    ├── 📁 _css
    ├── 📁 _views
    ├── 📝 index.js
    ├── 📝 package.json
    ├── 📝 package-lock.json
    └── 📝 favicon.ico

MultiQC Report
^^^^^^^^^^^^^^

MultiQC is a tool that provides overall diagnostic insights into metagenomic
pipelines. Although its use is limited in this pipeline, the report does contain
information on trimmed reads from Trimmomatic and filtered reads from Kraken2.
The reports can be viewed via :ref:`The Visualizer`, or they can be viewed
alone. The report overwrites itself with every pipeline run, and is named
``multiqc_report.html``. Its sidecar data files are located in the
``multiqc_data`` folder.

::

    results
    ├── 📁 multiqc_data
    └── 📝 multiqc_report.html

Reference Genome
^^^^^^^^^^^^^^^^

The pulled reference genome in fasta format can be found in the ``reference``
folder, as well as its samtools index, and its annotation in GFF3 format. The
name of the files are given by the NCBI description of the reference genome,
with some replacements to make it a safe name for all the processes that use it.

::

    results
    └── 📁 reference
        ├── 📝 Japanese_Encephalitis_Virus.fasta
        ├── 📝 Japanese_Encephalitis_Virus.fasta.fai
        └── 📝 Japanese_Encephalitis_Virus.gff


Classification Reports
^^^^^^^^^^^^^^^^^^^^^^

The read classification report generated by Kraken2 that is used to filter host
reads can be found for each sample in the ``classification`` folder under the
filename ``<samplename>.kreport``. The individual read classifications are also
available under the name ``<samplename>.kraken``. A summary of these files is
available in the :ref:`MultiQC Report`, that may be easier to visualize.

::

    results
    └── 📁 classification
        ├── 📝 pig-serum.kraken
        ├── 📝 pig-serum.kreport
        ├── 📝 pig-feces.kraken
        └── 📝 pig-feces.kreport

Alignments
^^^^^^^^^^

Alignments for each sample can be found in the ``alignment`` folder in the BAM
format, as well as their sidecar index files. Files are always in the
``<samplename>.bam`` and ``<samplename>.bam.bai`` naming scheme.

::

    results
    └── 📁 alignment
        ├── 📝 pig-serum.bam
        ├── 📝 pig-serum.bam.bai
        ├── 📝 pig-feces.bam
        └── 📝 pig-feces.bam.bai

Assemblies
^^^^^^^^^^

Assemblies are output as both fasta sequences and as BAM alignments. They can be
found in the ``assembly/sequence`` and ``assembly/alignment`` folders,
respectively. All files are named ``<samplename>.contigs.<ext>``.

::

    results
    └── 📁 assembly
        ├── 📁 alignment
        |   ├── 📝 pig-serum.contigs.bam
        |   ├── 📝 pig-serum.contigs.bam.bai
        |   ├── 📝 pig-feces.contigs.bam
        |   └── 📝 pig-feces.contigs.bam.bai
        └── 📁 sequence
            ├── 📝 pig-serum.contigs.fasta
            └── 📝 pig-feces.contigs.fasta

Variant Calls
^^^^^^^^^^^^^

Variant calls for each sample are output to the ``variants`` folder when
analyzing Nanopore reads (no variant calls are output for Illumina reads). The
filename is always ``<samplename>.vcf``.

::

    results
    └── 📁 variants
        ├── 📝 pig-serum.vcf
        └── 📝 pig-feces.vcf

Haplotypes
^^^^^^^^^^

Haplotypes for each sample are output to the ``haplotypes`` folder. There is a
a fasta file containing the mutated sequences, and also a data file describing
the haplotypes. The data file is in JSON format for Illumina reads and YAML
format for Nanopore reads. The filename is always
``<samplename>.haplotypes.<ext>``.

::

    results
    └── 📁 haplotypes
        ├── 📝 pig-serum.haplotypes.fasta
        ├── 📝 pig-serum.haplotypes.yaml
        ├── 📝 pig-feces.haplotypes.fasta
        └── 📝 pig-feces.haplotypes.yaml


Multiple Alignments
^^^^^^^^^^^^^^^^^^^

The alignments of the reference genome, assembly, and haplotypes in fasta format
are contained in the ``<samplename>.haplotypes.fas`` file in the
``multi_alignment`` folder.

::

    results
        └── 📁 multi_alignment
            ├── 📝 pig-serum.haplotypes.fas
            └── 📝 pig-feces.haplotypes.fas

Phylogenetic Trees
^^^^^^^^^^^^^^^^^^

Phylogenetic trees of the haplotypes in Newick format are contained in the
``phylogenetics`` folder in files with the name ``<samplename>.nwk``.

::

    results
    └── 📁 phylogenetics
        ├── 📝 pig-serum.nwk
        └── 📝 pig-feces.nwk

Diagnostics
^^^^^^^^^^^

Pipeline runtime reports can be found in the ``.trace`` folder by default, but
this can be modified using the :ref:`--tracedir` parameter. Four types of
Nextflow traces are output.

* :ref:`Execution reports <execution-report>`
* :ref:`Execution timelines <timeline-report>`
* :ref:`Process traces <trace-report>`
* :ref:`Process graphs <dag-visualisation>`


These reports are specific to each time the pipeline is launched, and have the
date and time of execution appended, e.g.
``execution_report_2021-10-01_12-00-00.html``. They can all be viewed via
:ref:`The Visualizer`, or viewed alone.

::

    results
    └── 📁 .trace
        ├── 📝 execution_report_2021-09-01_12-00-00.html
        ├── 📝 execution_report_2021-10-01_12-00-00.html
        ├── 📝 execution_timeline_2021-09-01_12-00-00.html
        ├── 📝 execution_timeline_2021-10-01_12-00-00.html
        ├── 📝 execution_trace_2021-09-01_12-00-00.txt
        ├── 📝 execution_trace_2021-10-01_12-00-00.txt
        ├── 📝 pipeline_dag_2021-09-01_12-00-00.svg
        └── 📝 pipeline_dag_2021-09-01_12-00-00.svg
