#!/bin/bash
# -*- mode: julia -*-
#=
julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" -e 'using Pkg; Pkg.instantiate()'
exec julia --project="$(realpath "$(dirname "${BASH_SOURCE[0]}")")" "${BASH_SOURCE[0]}" "$@"
=#
# Converts a reference sequence and haplotype definitions to FASTA format

using FASTX
using YAML
using HapLink
using BioSequences
using BioSymbols

hfile = ARGS[1]
rfile = ARGS[2]
ffile = ARGS[3]

function HapLink.Variant(vardict::Dict{String,Any})
    region  = vardict["chromosome"]
    pos     = vardict["position"]
    id      = vardict["identifier"]
    refbase = vardict["referencebase"]
    altbase = vardict["alternatebase"]
    qual    = vardict["quality"]
    filter  = Symbol(vardict["filter"])

    refseq = LongDNASeq(refbase)
    altseq = LongDNASeq(altbase)

    return HapLink.Variant(region, pos, id, refseq, altseq, qual, filter, Dict())
end #function

function HapLink.Haplotype(hapdict::Dict{String,Any})
    v = HapLink.Variant.(hapdict["mutations"])
    return HapLink.Haplotype(v)
end

haployaml = read(hfile, String)
haplostrings = split(haployaml, "---\n")[2:end]
haplotypes = Haplotype.(YAML.load.(haplostrings, dicttype=Dict{String,Any}))

rreader = open(FASTA.Reader, rfile)
refrec = collect(rreader)[1]
close(rreader)

newrecords = unique(mutate.([refrec], haplotypes))

fwriter = open(FASTA.Writer, ffile)
for r in newrecords
    write(fwriter, r)
end
close(fwriter)
